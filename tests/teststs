import pytest
from unittest.mock import patch, MagicMock
from ultrasensor import Subject, SoundObserver, read_distance  # Replace 'your_script_file' with the actual name of your script file

# Mock GPIO functions for testing
class MockGPIO:
    @staticmethod
    def setmode(mode):
        pass

    @staticmethod
    def setup(pin, direction):
        pass

    @staticmethod
    def output(pin, value):
        pass

    @staticmethod
    def input(pin):
        pass
    
# Mock pygame.mixer for testing
class MockPygameMixer:
    @staticmethod
    def init():
        pass

    @staticmethod
    def music_load(sound_path):
        pass

    @staticmethod
    def music_play():
        pass
    

# Test the Subject and SoundObserver classes
def test_sound_observer():
    observer = SoundObserver()
    observer.sound_files = ["Kid_Laugh-Mike_Koenig-1673908713.mp3", "Pew_Pew-DKnight556-1379997159.mp3"] 
    with patch.object(MockPygameMixer, 'music_play') as mock_play:
        observer.play_random_sound()
        mock_play.assert_called()

# Test the Subject class with a mocked observer
def test_subject_notify_observers():
    subject = Subject()
    observer = SoundObserver()

    # Attach a mocked observer
    with patch.object(observer, 'update') as mock_update:
        subject.add_observer(observer)

        # Simulate a scenario where the distance is less than THRESHOLD_DISTANCE
        distance = 9.0  # Adjust this value as needed
        subject.notify_observers(distance)

        # Assert that the observer.update method was called
        mock_update.assert_called_with(distance)

        # Detach the observer
        subject.remove_observer(observer)

        # Simulate a scenario where the distance is greater than THRESHOLD_DISTANCE
        distance = 11.0  # Adjust this value as needed
        subject.notify_observers(distance)

        # Assert that the observer.update method was not called
        mock_update.assert_not_called()
        
def test_subject_add_remove_observer():
    subject = Subject()
    observer = SoundObserver()
    subject.add_observer(observer)
    assert len(subject.observers) == 1
    subject.remove_observer(observer)
    assert len(subject.observers) == 0
# Test the read_distance function with a timeout
def test_read_distance_timeout():
    # Mock GPIO functions to simulate timeout
    with patch.object(MockGPIO, 'input', return_value=0):
        distance = read_distance()
        assert distance == -1


if __name__ == '__main__':
    pytest.main()
